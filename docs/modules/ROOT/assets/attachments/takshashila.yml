openapi: 3.0.3
info:
  title: Takshashila Api
  termsOfService: https://www.takshashila.com/terms-of-use.html
  contact:
    name: Takshashila
    email: admin@takshashila.com
  version: 0.0.1-SNAPSHOT
  license:
    name: Takshashila, Inc.
    url: https://www.takshashila.com/terms-of-use.html
servers:
  - url: https://localhost:8080/api
security:
  - ApiKeyAuth: []
tags:
  - name: Public
    description: Public Apis
  - name: User
    description: User Apis
externalDocs:
  description: Takshashila API Documentation
  url: https://pccofvns.github.io/
paths:
  /v1/public/picklists/{picklist}:
    get:
      tags:
        - Public
      summary: Picklist return by key
      description: This service returns the map of key and values for particular picklist
      operationId: getPicklistByKey
      parameters:
        - name: lang
          in: header
          description: Locale of the banner has to be rendered e.g. en or es
          required: false
          schema:
            type: string
            default: en
          example: en
        - name: picklist
          in: path
          description: Picklist name
          required: true
          schema:
            type: string
          example: citizenshipStatus
      responses:
        '200':
          description: Returns the map of key and values for particular picklist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PicklistResponse'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /v1/public/users/register:
    post:
      tags:
        - Public
      summary: Register user
      description: This service returns token after login
      operationId: register
      parameters:
        - name: username
          in: query
          description: Username
          required: true
          schema:
            type: string
          example: pccofvns
        - name: password
          in: query
          description: Password
          required: true
          schema:
            type: string
          example: P@ssw0rd
      responses:
        '200':
          description: Returns token
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /v1/public/users/login:
    post:
      tags:
        - Public
      summary: Login user
      description: This service returns token after login
      operationId: login
      parameters:
        - name: username
          in: query
          description: Username
          required: true
          schema:
            type: string
          example: pccofvns
        - name: password
          in: query
          description: Password
          required: true
          schema:
            type: string
          example: P@ssw0rd
      responses:
        '200':
          description: Returns token
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /v1/users/current:
    get:
      tags:
        - User
      summary: Get logged in user
      description: This service returns user details by id
      operationId: currentUser
      parameters:
        - name: user
          in: header
          description: User Authentication Principal
          required: true
          schema: {}
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema: {}
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /v1/users/logout:
    get:
      tags:
        - User
      summary: Logout in user
      description: Logs out user
      operationId: logout
      parameters:
        - name: user
          in: header
          description: User Authentication Principal
          required: true
          schema: {}
      responses:
        '200':
          description: Whether user has successfully logged out
          content:
            application/json:
              schema:
                type: boolean
                example: true
                description: Is user logged out
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /v1/users/{user-id}:
    get:
      tags:
        - User
      summary: Get user by id
      description: This service returns user details by id
      operationId: getUserById
      parameters:
        - name: lang
          in: header
          description: Locale of the banner has to be rendered e.g. en or es
          required: false
          schema:
            type: string
            default: en
          example: en
        - name: user-id
          in: path
          description: User Id
          required: true
          schema:
            type: integer
            format: int64
          example: '1234'
      responses:
        '200':
          description: Returns the map of key and values for particular picklist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: authorization
      in: header
  schemas:
    Picklist:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    PicklistResponse:
      type: object
      properties:
        picklists:
          type: array
          items:
            $ref: '#/components/schemas/Picklist'
    ErrorMessage:
      type: object
      description: Validation Error
      properties:
        field:
          type: string
          description: Field name
          example: Name.firstName
        errorCode:
          type: string
          description: The error code specific to the field
          example: Validate.Name.firstName
        defaultMessage:
          type: string
          description: The default message text corresponding to error code
          example: First name is not valid
        argsMap:
          description: The name and value pairs of arguments of sn error message.
          type: object
          additionalProperties:
            type: string
            description: The value of the arguments identified by the key
          example:
            '0': Neo
    ErrorResponse:
      type: object
      description: Validation Error Response
      properties:
        type:
          type: string
          description: A URL to a page with more details regarding the problem.
          format: uri
          example: https://example.com/probs/cant-view-account-details
        title:
          type: string
          description: A message to the client from server with respect to this error
          example: Invalid Request
        status:
          type: integer
          format: int32
          description: Indicates error status code
          example: '400'
        instance:
          type: string
          format: uri
          description: The URL that was used for operations on the resource
          example: https://takshashila.com/v1/users/1234
        timestamp:
          type: string
          format: date-time
          description: Indicates timestamp of server
          example: 2023-01-01 XX
        errors:
          type: array
          description: Indicates validation Errors
          items:
            $ref: '#/components/schemas/ErrorMessage'
    User:
      type: object
      properties:
        username:
          type: string
          example: pccofvns
          description: Username
        password:
          type: string
          readOnly: true
          example: pccofvns
          description: Password
    UserResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
  responses:
    InvalidRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized
    NotFound:
      description: Resource Not Found
    ServerError:
      description: Server error
