/*
 * This file is generated by jOOQ.
 */
package com.pccofvns.ts.domain;


import com.pccofvns.ts.domain.tables.Permission;
import com.pccofvns.ts.domain.tables.Role;
import com.pccofvns.ts.domain.tables.RolePermissionX;
import com.pccofvns.ts.domain.tables.User;
import com.pccofvns.ts.domain.tables.UserRoleX;
import com.pccofvns.ts.domain.tables.records.PermissionRecord;
import com.pccofvns.ts.domain.tables.records.RolePermissionXRecord;
import com.pccofvns.ts.domain.tables.records.RoleRecord;
import com.pccofvns.ts.domain.tables.records.UserRecord;
import com.pccofvns.ts.domain.tables.records.UserRoleXRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * ts_qa.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<PermissionRecord> KEY_PERMISSION_PRIMARY = Internal.createUniqueKey(Permission.PERMISSION, DSL.name("KEY_permission_PRIMARY"), new TableField[] { Permission.PERMISSION.ID }, true);
    public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE, DSL.name("KEY_role_PRIMARY"), new TableField[] { Role.ROLE.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<RolePermissionXRecord, PermissionRecord> FK_PERMISSION_ID = Internal.createForeignKey(RolePermissionX.ROLE_PERMISSION_X, DSL.name("fk_permission_id"), new TableField[] { RolePermissionX.ROLE_PERMISSION_X.PERMISSION_ID }, Keys.KEY_PERMISSION_PRIMARY, new TableField[] { Permission.PERMISSION.ID }, true);
    public static final ForeignKey<RolePermissionXRecord, RoleRecord> FK_ROLE_ID = Internal.createForeignKey(RolePermissionX.ROLE_PERMISSION_X, DSL.name("fk_role_id"), new TableField[] { RolePermissionX.ROLE_PERMISSION_X.ROLE_ID }, Keys.KEY_ROLE_PRIMARY, new TableField[] { Role.ROLE.ID }, true);
    public static final ForeignKey<UserRoleXRecord, RoleRecord> FK_USER_ROLE_X_ROLE_ID = Internal.createForeignKey(UserRoleX.USER_ROLE_X, DSL.name("fk_user_role_x_role_id"), new TableField[] { UserRoleX.USER_ROLE_X.ROLE_ID }, Keys.KEY_ROLE_PRIMARY, new TableField[] { Role.ROLE.ID }, true);
    public static final ForeignKey<UserRoleXRecord, UserRecord> FK_USER_ROLE_X_USER_ID = Internal.createForeignKey(UserRoleX.USER_ROLE_X, DSL.name("fk_user_role_x_user_id"), new TableField[] { UserRoleX.USER_ROLE_X.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
}
