/*
 * This file is generated by jOOQ.
 */
package com.pccofvns.ts.domain.tables.records;


import com.pccofvns.ts.domain.tables.User;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record7<Long, String, String, Boolean, Boolean, Boolean, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ts.user.id</code>.
     */
    public UserRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ts.user.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>ts.user.username</code>.
     */
    public UserRecord setUsername(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ts.user.username</code>.
     */
    @NotNull
    @Size(max = 255)
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ts.user.password</code>.
     */
    public UserRecord setPassword(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ts.user.password</code>.
     */
    @Size(max = 255)
    public String getPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ts.user.credentials_non_expired</code>.
     */
    public UserRecord setCredentialsNonExpired(Boolean value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ts.user.credentials_non_expired</code>.
     */
    @NotNull
    public Boolean getCredentialsNonExpired() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>ts.user.non_expired</code>.
     */
    public UserRecord setNonExpired(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ts.user.non_expired</code>.
     */
    @NotNull
    public Boolean getNonExpired() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>ts.user.non_locked</code>.
     */
    public UserRecord setNonLocked(Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ts.user.non_locked</code>.
     */
    @NotNull
    public Boolean getNonLocked() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>ts.user.enabled</code>.
     */
    public UserRecord setEnabled(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ts.user.enabled</code>.
     */
    @NotNull
    public Boolean getEnabled() {
        return (Boolean) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, String, String, Boolean, Boolean, Boolean, Boolean> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return User.USER.ID;
    }

    @Override
    public Field<String> field2() {
        return User.USER.USERNAME;
    }

    @Override
    public Field<String> field3() {
        return User.USER.PASSWORD;
    }

    @Override
    public Field<Boolean> field4() {
        return User.USER.CREDENTIALS_NON_EXPIRED;
    }

    @Override
    public Field<Boolean> field5() {
        return User.USER.NON_EXPIRED;
    }

    @Override
    public Field<Boolean> field6() {
        return User.USER.NON_LOCKED;
    }

    @Override
    public Field<Boolean> field7() {
        return User.USER.ENABLED;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUsername();
    }

    @Override
    public String component3() {
        return getPassword();
    }

    @Override
    public Boolean component4() {
        return getCredentialsNonExpired();
    }

    @Override
    public Boolean component5() {
        return getNonExpired();
    }

    @Override
    public Boolean component6() {
        return getNonLocked();
    }

    @Override
    public Boolean component7() {
        return getEnabled();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUsername();
    }

    @Override
    public String value3() {
        return getPassword();
    }

    @Override
    public Boolean value4() {
        return getCredentialsNonExpired();
    }

    @Override
    public Boolean value5() {
        return getNonExpired();
    }

    @Override
    public Boolean value6() {
        return getNonLocked();
    }

    @Override
    public Boolean value7() {
        return getEnabled();
    }

    @Override
    public UserRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public UserRecord value2(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public UserRecord value3(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public UserRecord value4(Boolean value) {
        setCredentialsNonExpired(value);
        return this;
    }

    @Override
    public UserRecord value5(Boolean value) {
        setNonExpired(value);
        return this;
    }

    @Override
    public UserRecord value6(Boolean value) {
        setNonLocked(value);
        return this;
    }

    @Override
    public UserRecord value7(Boolean value) {
        setEnabled(value);
        return this;
    }

    @Override
    public UserRecord values(Long value1, String value2, String value3, Boolean value4, Boolean value5, Boolean value6, Boolean value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(Long id, String username, String password, Boolean credentialsNonExpired, Boolean nonExpired, Boolean nonLocked, Boolean enabled) {
        super(User.USER);

        setId(id);
        setUsername(username);
        setPassword(password);
        setCredentialsNonExpired(credentialsNonExpired);
        setNonExpired(nonExpired);
        setNonLocked(nonLocked);
        setEnabled(enabled);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(com.pccofvns.ts.domain.tables.pojos.User value) {
        super(User.USER);

        if (value != null) {
            setId(value.id());
            setUsername(value.username());
            setPassword(value.password());
            setCredentialsNonExpired(value.credentialsNonExpired());
            setNonExpired(value.nonExpired());
            setNonLocked(value.nonLocked());
            setEnabled(value.enabled());
            resetChangedOnNotNull();
        }
    }
}
